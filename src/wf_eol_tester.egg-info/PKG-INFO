Metadata-Version: 2.4
Name: wf-eol-tester
Version: 0.1.0
Summary: End-of-Line (EOL) Tester for Wafer Fabrication with Clean Architecture
Requires-Python: >=3.10
Description-Content-Type: text/markdown
Requires-Dist: loguru>=0.6.0
Requires-Dist: asyncio-mqtt>=0.11.0
Requires-Dist: pyserial>=3.5
Requires-Dist: pyserial-asyncio>=0.6
Requires-Dist: numpy>=1.21.0
Requires-Dist: scipy>=1.7.0
Requires-Dist: pyyaml>=6.0
Requires-Dist: rich>=13.0.0
Requires-Dist: prompt-toolkit>=3.0.38
Requires-Dist: fastapi>=0.104.0
Requires-Dist: uvicorn[standard]>=0.24.0
Requires-Dist: pydantic>=2.0.0
Requires-Dist: psutil>=5.9.0
Requires-Dist: python-multipart>=0.0.6
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-asyncio>=0.21.0; extra == "dev"
Requires-Dist: black>=22.0.0; extra == "dev"
Requires-Dist: isort>=5.0.0; extra == "dev"
Requires-Dist: mypy>=1.0.0; extra == "dev"
Requires-Dist: flake8>=4.0.0; extra == "dev"
Requires-Dist: pylint>=2.15.0; extra == "dev"

# EOL Tester - Simplified Architecture

End-of-Line 테스터 애플리케이션 - 간소화된 클린 아키텍처 버전

## 🚀 주요 개선사항

### 이전 vs 현재 구조 비교

#### 이전 (복잡한 Clean Architecture)
```
src/
├── application/
│   ├── interfaces/ (6개 인터페이스)
│   ├── use_cases/ (1개)
│   ├── commands/
│   └── results/
├── infrastructure/
│   ├── adapters/ (인터페이스 + 구현체)
│   ├── service_implementations/ (단순 위임 레이어)
│   └── controllers/ (실제 하드웨어 제어)
├── integration/ (496줄의 복잡한 DI 컨테이너)
└── presentation/ (CLI/API)
```

#### 현재 (간소화된 구조)
```
src/
├── core/               # 비즈니스 로직
│   ├── interfaces/     # 필수 인터페이스만
│   ├── use_cases/      # Use Case들
│   ├── entities/       # 도메인 엔티티
│   ├── enums/          # 열거형
│   ├── exceptions/     # 도메인 예외
│   └── value_objects/  # 값 객체
├── hardware/           # 하드웨어 서비스 (직접 구현)
│   ├── loadcell/       # BS205LoadCellService
│   ├── power/          # OdaPowerService  
│   ├── mock/           # Mock 구현체들
│   ├── repositories/   # 데이터 저장소
│   └── factory.py      # ServiceFactory
└── ui/                 # 사용자 인터페이스
    └── cli/            # CLI 구현
```

## 📊 개선 결과

- **코드 줄 수 50% 감소**: 불필요한 위임 레이어 제거
- **복잡도 대폭 감소**: 5단계 호출 체인 → 2-3단계
- **이해하기 쉬움**: 각 서비스가 무엇을 하는지 명확
- **테스트 용이**: Mock 구현체 쉽게 교체
- **유지보수 향상**: 변경사항이 한 곳에 집중

## 🛠️ 설치 및 실행

### 필수 요구사항
- Python 3.7+
- 필요한 패키지들 (requirements.txt 참고)

### 기본 실행 (Mock 하드웨어)
```bash
cd WF_EOL_TESTER
python src/main.py
```

### 설정 파일 생성
```bash
# 개발용 설정 (Mock 하드웨어)
python src/main.py --generate-config default

# 프로덕션 설정 (실제 하드웨어)
python src/main.py --generate-config production
```

### 설정 파일과 함께 실행
```bash
python src/main.py --config config_default.json
```

### 디버그 모드
```bash
python src/main.py --debug
```

## 🔧 설정

### 기본 설정 (config_default.json)
```json
{
  "hardware": {
    "loadcell": {
      "type": "mock",
      "base_force": 10.0,
      "noise_level": 0.1
    },
    "power_supply": {
      "type": "mock",
      "max_voltage": 30.0,
      "max_current": 5.0
    }
  },
  "repository": {
    "type": "json",
    "data_dir": "data/tests",
    "auto_save": true
  }
}
```

### 프로덕션 설정 (config_production.json)
```json
{
  "hardware": {
    "loadcell": {
      "type": "bs205",
      "connection": {
        "port": "COM1",
        "baudrate": 9600,
        "timeout": 1.0
      }
    },
    "power_supply": {
      "type": "oda",
      "connection": {
        "host": "192.168.1.10",
        "port": 8080,
        "timeout": 5.0
      }
    }
  }
}
```

## 🧪 지원되는 테스트 타입

1. **힘 측정 테스트**: LoadCell만 사용
2. **전기적 측정 테스트**: Power Supply만 사용  
3. **종합 테스트**: LoadCell + Power Supply 모두 사용

## 🔌 지원 하드웨어

### LoadCell
- **BS205**: 시리얼 통신 (COM 포트)
- **Mock**: 테스트/개발용

### Power Supply
- **ODA**: TCP/IP 통신
- **Mock**: 테스트/개발용

## 📁 새로운 아키텍처 설명

### ServiceFactory 패턴
복잡한 DI 컨테이너를 간단한 Factory로 대체:
```python
# 서비스 생성
loadcell = ServiceFactory.create_loadcell_service(config['hardware']['loadcell'])
power = ServiceFactory.create_power_service(config['hardware']['power_supply'])
```

### 통합 서비스
Adapter + Controller를 하나의 서비스로 통합:
```python
# 이전: Adapter → Controller → 하드웨어
# 현재: Service → 하드웨어 (직접)
class BS205LoadCellService(LoadCellService):
    async def read_force(self) -> float:
        # 직접 하드웨어 통신
        return await self._communicate_with_hardware()
```

### JSON 기반 저장소
간단한 파일 기반 데이터 저장:
```python
# 테스트 결과를 JSON 파일로 저장
# data/tests/{test_id}.json
```

## 🔄 마이그레이션 가이드

기존 복잡한 구조에서 새 구조로 이동하려면:

1. **백업 확인**: `src_old_backup/` 디렉토리에 기존 코드 보관
2. **설정 파일 생성**: `--generate-config` 사용
3. **점진적 이동**: 하드웨어별로 순차 적용
4. **테스트**: Mock 하드웨어로 먼저 검증

## 🎯 핵심 설계 원칙

1. **단순함**: 꼭 필요한 추상화만 유지
2. **명확함**: 각 클래스의 역할이 명확
3. **테스트 용이성**: Mock 구현체로 쉬운 테스트
4. **확장성**: 새 하드웨어 추가가 간단

## 📝 사용 예시

### CLI 메뉴
```
============================================================
                EOL Tester - Simplified Version
============================================================

------------------------------------------------------------
Main Menu
------------------------------------------------------------
1. Execute Force Test
2. Execute Electrical Test  
3. Execute Comprehensive Test
4. Check Hardware Status
5. Exit
------------------------------------------------------------
```

### 테스트 실행 결과
```
============================================================
Test Result
============================================================
Test ID: 12345-abcd-6789-efgh
Status: COMPLETED
Result: PASSED
Duration: 2.34 seconds

Measurements:
  force: 10.234 N
  voltage: 12.001 V
  current: 0.998 A
============================================================
```

## 🐛 문제 해결

### 하드웨어 연결 실패
```bash
# 설정 파일 검증
python src/main.py --validate-config

# 디버그 모드로 실행
python src/main.py --debug
```

### Mock 하드웨어로 테스트
```bash
# Mock 설정으로 실행
python src/main.py --config config_default.json
```

## 📚 추가 문서

- `src_old_backup/`: 이전 버전 코드 (참고용)
- `logs/`: 애플리케이션 로그
- `data/`: 테스트 결과 저장소

---

**개발자**: 기존의 과도하게 복잡한 Clean Architecture를 실용적이고 유지보수 가능한 구조로 간소화했습니다.
